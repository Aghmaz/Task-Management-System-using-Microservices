version: "3.8"

services:
  # MongoDB for Auth and Task services
  mongodb:
    image: mongo:7.0
    container_name: task-management-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password123
      MONGO_INITDB_DATABASE: task_management
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./scripts/mongo-init.js:/docker-entrypoint-initdb.d/mongo-init.js:ro
    networks:
      - task-management-network

  # PostgreSQL for Reporting and Admin services
  postgres:
    image: postgres:15
    container_name: task-management-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_DB: task_management
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/postgres-init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    networks:
      - task-management-network

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: task-management-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - task-management-network

  # API Gateway
  api-gateway:
    build:
      context: ./api-gateway
      dockerfile: Dockerfile
    container_name: task-management-api-gateway
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: development
      PORT: 3000
      AUTH_SERVICE_URL: http://auth-service:3001
      TASK_SERVICE_URL: http://task-service:3002
      NOTIFICATION_SERVICE_URL: http://notification-service:3003
      REPORTING_SERVICE_URL: http://reporting-service:3004
      ADMIN_SERVICE_URL: http://admin-service:3005
    depends_on:
      - auth-service
      - task-service
      - notification-service
      - reporting-service
      - admin-service
    networks:
      - task-management-network

  # Authentication Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: task-management-auth-service
    restart: unless-stopped
    ports:
      - "3001:3001"
    environment:
      NODE_ENV: development
      PORT: 3001
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/task_management_auth?authSource=admin
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    depends_on:
      - mongodb
    networks:
      - task-management-network

  # Task Management Service
  task-service:
    build:
      context: ./task-service
      dockerfile: Dockerfile
    container_name: task-management-task-service
    restart: unless-stopped
    ports:
      - "3002:3002"
    environment:
      NODE_ENV: development
      PORT: 3002
      MONGODB_URI: mongodb://admin:password123@mongodb:27017/task_management_tasks?authSource=admin
      NOTIFICATION_SERVICE_URL: http://notification-service:3003
    depends_on:
      - mongodb
      - notification-service
    networks:
      - task-management-network

  # Notification Service
  notification-service:
    build:
      context: ./notification-service
      dockerfile: Dockerfile
    container_name: task-management-notification-service
    restart: unless-stopped
    ports:
      - "3003:3003"
    environment:
      NODE_ENV: development
      PORT: 3003
      SMTP_HOST: smtp.gmail.com
      SMTP_PORT: 587
      SMTP_USER: your-email@gmail.com
      SMTP_PASS: your-app-password
      SMTP_FROM: Task Management System <noreply@taskmanagement.com>
    networks:
      - task-management-network

  # Reporting Service
  reporting-service:
    build:
      context: ./reporting-service
      dockerfile: Dockerfile
    container_name: task-management-reporting-service
    restart: unless-stopped
    ports:
      - "3004:3004"
    environment:
      NODE_ENV: development
      PORT: 3004
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_HOST: postgres
      POSTGRES_DB: task_management_reports
      POSTGRES_PORT: 5432
    depends_on:
      - postgres
    networks:
      - task-management-network

  # Admin Service
  admin-service:
    build:
      context: ./admin-service
      dockerfile: Dockerfile
    container_name: task-management-admin-service
    restart: unless-stopped
    ports:
      - "3005:3005"
    environment:
      NODE_ENV: development
      PORT: 3005
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password123
      POSTGRES_HOST: postgres
      POSTGRES_DB: task_management_admin
      POSTGRES_PORT: 5432
      JWT_SECRET: your-super-secret-jwt-key-change-in-production
      JWT_EXPIRES_IN: 24h
    depends_on:
      - postgres
    networks:
      - task-management-network

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: task-management-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - api-gateway
    networks:
      - task-management-network

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: task-management-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
      - "--web.console.libraries=/etc/prometheus/console_libraries"
      - "--web.console.templates=/etc/prometheus/consoles"
      - "--storage.tsdb.retention.time=200h"
      - "--web.enable-lifecycle"
    networks:
      - task-management-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: task-management-grafana
    restart: unless-stopped
    ports:
      - "3006:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: admin123
      GF_USERS_ALLOW_SIGN_UP: false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - task-management-network

volumes:
  mongodb_data:
    driver: local
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  task-management-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
